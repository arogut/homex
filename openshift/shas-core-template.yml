apiVersion: v1
kind: Template
labels:
  template: shas-core
metadata:
  annotations:
    description: Application template for SHAS Core
    iconClass: spring
    tags: java,spring boot
    version: 0.0.1
  name: shas-core
objects:
- apiVersion: v1
  kind: Service
  metadata:
    annotations:
      description: The web server's http port.
    labels:
      application: ${APPLICATION_NAME}
    name: ${APPLICATION_NAME}
    namespace: ${NAMESPACE}
  spec:
    ports:
    - port: 8081
      targetPort: 8081
    selector:
      deploymentConfig: ${APPLICATION_NAME}
- apiVersion: v1
  id: ${APPLICATION_NAME}-http
  kind: Route
  metadata:
    annotations:
      description: Route for application's http service.
    labels:
      application: ${APPLICATION_NAME}
    name: ${APPLICATION_NAME}
    namespace: ${NAMESPACE}
  spec:
    to:
      name: ${APPLICATION_NAME}
- apiVersion: v1
  kind: ImageStream
  metadata:
    labels:
      application: ${APPLICATION_NAME}
    name: ${APPLICATION_NAME}
    namespace: ${NAMESPACE}
- apiVersion: v1
  kind: DeploymentConfig
  metadata:
    labels:
      app: ${APPLICATION_NAME}
    name: ${APPLICATION_NAME}
    namespace: ${NAMESPACE}
  spec:
    replicas: 1
    selector:
      deploymentConfig: ${APPLICATION_NAME}
    strategy:
      type: Recreate
    template:
      metadata:
        labels:
          application: ${APPLICATION_NAME}
          deploymentConfig: ${APPLICATION_NAME}
        name: ${APPLICATION_NAME}
      spec:
        containers:
        - env:
            - name: DB_PATH
              value: postgresql
            - name: DB_PORT
              value: '5432'
            - name: DB_USER
              valueFrom:
                secretKeyRef:
                  key: database-user
                  name: postgresql
            - name: DB_PASSWORD
              valueFrom:
                secretKeyRef:
                  key: database-password
                  name: postgresql
            - name: DB_NAME
              valueFrom:
                secretKeyRef:
                  key: database-name
                  name: postgresql
            - name: RABBITMQ_HOST
              value: rabbitmq
            - name: RABBITMQ_PORT
              value: '5672'
            #TODO: MOVE THESE TWO TO SECRETS
            - name: RABBITMQ_USER
              valueFrom:
                secretKeyRef:
                  key: username
                  name: rabbitmq
            - name: RABBITMQ_PASSWORD
              valueFrom:
                secretKeyRef:
                  key: password
                  name: rabbitmq
            - name: SPRING_CONFIG_LOCATION
              value: /deployments/config/application.yml
          image: ${APPLICATION_NAME}
          imagePullPolicy: Always
          name: ${APPLICATION_NAME}
          ports:
          - containerPort: 8080
            name: http
            protocol: TCP
          volumeMounts:
            - mountPath: /deployments/config
              name: volume-ynp1i
        terminationGracePeriodSeconds: 60
        volumes:
          - configMap:
              defaultMode: 420
              items:
                - key: application.yml
                  path: application.yml
              name: ${APPLICATION_NAME}-cfg
            name: volume-ynp1i
    triggers:
    - imageChangeParams:
        automatic: true
        containerNames:
        - ${APPLICATION_NAME}
        from:
          kind: ImageStreamTag
          name: ${APPLICATION_NAME}:latest
      type: ImageChange
    - type: ConfigChange
- apiVersion: v1
  kind: BuildConfig
  metadata:
    labels:
      app: ${APPLICATION_NAME}-docker
    name: ${APPLICATION_NAME}-docker
  spec:
    nodeSelector: null
    output:
      to:
        kind: ImageStreamTag
        name: ${APPLICATION_NAME}:latest
    postCommit: {}
    resources: {}
    runPolicy: Serial
    source:
      binary:
        asFile: ROOT.jar
      type: Binary
    strategy:
      dockerStrategy: {}
      type: Docker
    triggers: []
- apiVersion: v1
  kind: BuildConfig
  metadata:
    name: ${APPLICATION_NAME}-pipeline
  spec:
    source:
      git:
        ref: pipeline
        uri: https://github.com/arogut/shas.git
      type: Git
    strategy:
      type: JenkinsPipeline
      jenkinsPipelineStrategy:
        jenkinsfilePath: build/shas-core/core-pipeline.groovy
- apiVersion: v1
  kind: ConfigMap
  metadata:
    name: ${APPLICATION_NAME}-cfg
    namespace: ${NAMESPACE}
  data:
    application.yml: |-
      app:
        receive:
          queue: "message-in"
          topic: "message-in-ex"


      spring:
        datasource:
          url: "jdbc:postgresql://${DB_PATH}:${DB_PORT}/${DB_NAME}"
          username: ${DB_USER}
          password: ${DB_PASSWORD}
          driverClassName: org.postgresql.Driver
        jpa:
          database-platform: org.hibernate.dialect.PostgreSQL94Dialect
          hibernate:
            ddl-auto: create
          show-sql: false
        jackson:
          serialization:
            indent_output: true
        rabbitmq:
          host: ${RABBITMQ_HOST}
          port: ${RABBITMQ_PORT}
          username: ${RABBITMQ_USER}
          password: ${RABBITMQ_PASSWORD}

parameters:
- description: The name for the application.
  name: APPLICATION_NAME
  required: true
  value: shas-core
- description: The namespace to deploy into
  name: NAMESPACE
  required: true